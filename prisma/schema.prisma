// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // mysql DB 사용
  url      = env("DATABASE_URL")
}

// users
model Users {
  userId    String   @id @default(uuid()) @map("id")
  nickname  String   @unique @map("nickname")
  password  String   @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  // 관계 설정
  Posts     Posts[] // 사용자(Users) 테이블과 게시글(Posts) 테이블이 1:N 관계를 맺습니다.
  Comments  Comments[] // 사용자(Users) 테이블과 댓글(Comments) 테이블이 1:N 관계를 맺습니다.
  Likes    Likes[] // 사용자(Users) 테이블과 좋아요(Likes) 테이블이 1:N 관계를 맺습니다.
 
  @@map("Users")
}

// posts
model Posts {
  postId      String    @id @default(uuid()) @map("id")
  title       String    @map("title")
  content     String    @db.Text @map("content") 
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime  @updatedAt @map("updatedAt")

  // 외래키
  UserId      String    @map("UserId")

  // 관계 설정
  Comments    Comments[] //Posts 테이블과 Comments 테이블이 1:N 관계를 맺습니다.
  Users       Users     @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  Likes       Likes[] // 게시글(Posts) 테이블과 좋아요(Likes) 테이블이 1:N 관계를 맺습니다.

  @@map("Posts")
}

// comments
model Comments {
  commentId     String    @id @default(uuid()) @map("id")
  comment       String    @db.Text @map("comment") 
  createdAt     DateTime  @default(now()) @map("createdAt")
  updatedAt     DateTime  @updatedAt @map("updatedAt")
  
  // 외래키
  PostId        String    @map("PostId")
  UserId        String    @map("UserId")

  // 관계 설정
  Posts         Posts     @relation(fields: [PostId], references: [postId], onDelete: Cascade)
  Users         Users     @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("Comments")
}

model Likes {
  likeId    String      @id @default(uuid()) @map("likeId")
  createdAt DateTime    @default(now()) @map("createdAt")
  updatedAt DateTime    @updatedAt @map("updatedAt")

  Posts     Posts       @relation(fields: [PostId], references: [postId], onDelete: Cascade)
  Users     Users       @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  
  PostId    String      @map("PostId") // 게시글(Posts) 테이블을 참조하는 외래키
  UserId    String      @map("UserId") // 사용자(Users) 테이블을 참조하는 외래키

  @@map("Likes")
}